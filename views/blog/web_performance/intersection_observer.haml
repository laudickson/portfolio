%h1 lazy loading

%p the concept is load things as relative to when the user is seeing content. so don't be loading things all right away, just be loading things when the viewport is at 100% or some fraction of that. a cool combo trick is to use 'display: none;' and IntersectionObserver api https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API very cool shit. basically start loading content that is 500px below viewport.

%p this is really best used for images

%h1 Implement your own content delivery network (CDN).
%p A collection of global servers share a website’s static files, such as CSS or JavaScript, and they deliver from the server closest to the user’s physical location. In other words, when a user clicks on a video, the file loads faster because it is distributed from a server nearby. Larger websites implement CDNs to ensure visitors around the world have a much more accessible, fast experience.
%h2 Use adaptive images.
%p According to the HTTP Archive, 61 percent of a website’s page weight on a desktop computer is images. Start by using tools such as Picturefill or Adaptive Images on your website to save bandwidth and improve page speed for your site. Another option is to adopt new image formats like WebP and JPeg XR—this can help reduce image weight by twenty to fifty percent without sacrificing image quality.
%h3 Cache, cache, cache.
%p Browser caching stores cache versions of static resources, a process that quickens page speed tremendously and reduces server lag. When a user visits a page on your website, the cached version usually displays unless it has changed since it was last cached. This means the browser saves a lot of requests to your server and improves load speed for your site.
Evaluate your plugins. Plugins can bring new functionality and features to your website, but the more plugins your website has, the longer it takes to load. Poor or outdated plugins can slow down website performance dramatically, which could be fixed by removing plugins that duplicate functionality, are out of date or are no longer used.
%h4 Combine images into CSS sprites.
%p If you have several images on a page, you are forcing multiple roundtrips of the server to get all the resources secured, which slows down page speed. Sprites combine all background images on a page into one single image, which means all images appear when the main “sprite” loads. This reduces the chance of flickering images and a smoother experience for your users.
Enable HTTP keep-alive response headers. HTTP requests are simple: they grab a single file, distribute and close. That said, this process is not always fast. Keep-alive allows the web browser and server to agree to use the same connection to grab and send multiple files. In other words, the server holds the connection open while a user is on the site instead of opening a new connection with every request, easing the load for the processor, network and memory.
%h5 Compress your content.
%p You can compress your content significantly in order to improve your website performance. Popular web servers such as Apache and IIS use the GZIP compression algorithm to do this automatically on HTML, CSS and JavaScript. There are even compressor services online that remove unnecessary spaces and characters across your HTML and CSS code.
Configure expires headers. When a user visits your website, the website files are stored on their computer so that your website loads faster for them the next time they visit. There is an expiration date in the file header that determines how long these files will be stored on their computer, which is usually set to 24 hours by default. You can configure the expires header so that the files never time out, or you can increase the expiration date so that it doesn’t impact your server and page load time.
%h6 Minify JavaScript and CSS.
%p By removing unnecessary line breaks, extra space, and so on, you will speed up parsing, downloading and executing. This simple task can cut bytes of data from your page, and every little bit counts. Tools like this CSS Minifier/Compressor can be very helpful in this department.
Review your hosting package. If you’ve taken these previous steps and your website is still loading slowly, you may want to consider a new hosting package. On a typical shared hosting account, you might be sharing server space with dozens of other companies, which can impact the speed of your website since a number of people are using the same server. If shared hosting no longer meets your needs, consider dedicated hosting. This option allows you alone have access to the server, or a VPS (Virtual Private Server)—a physical computer partitioned into multiple servers each running its own operating system.
%h1 You can also try migrating to a Virtual Private Cloud (VPC).
%p Companies that rely on their website to stream large amounts of content, or those running a browser-based SaaS platform may find that a VPC enables faster, more predictable performance and can cut bandwidth costs up to 70%.
